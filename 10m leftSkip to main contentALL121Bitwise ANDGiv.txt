10m leftSkip to main contentALL121. Bitwise ANDGiven an array of non-negative integers, count the number of unordered pairs of array elements such that their bitwise AND is a power of 2. For example, let's say the array is arr = [10, 7, 2, 8, 3], and let '&' denote the bitwise AND operator. There are 6 unordered pairs of its elements that have a bitwise AND that is a power of two:For indices (0,1), 10 & 7 = 2, which is a power of 2.For indices (0,2), 10 & 2 = 2, which is a power of 2.For indices (0,3), 10 & 8 = 8, which is a power of 2.For indices (0,4), 10 & 3 = 2, which is a power of 2.For indices (1,2), 7 & 2 = 2, which is a power of 2.For indices (2,4), 2 & 3 = 2, which is a power of 2. Therefore, the answer is 6. Function DescriptionComplete the function countPairs in the editor below. countPairs has the following parameter: int arr[n]: an array of integersReturns: int: the number of unordered pairs of elements of arr such that their bitwise AND is a power of 2 Constraints1 ≤ n ≤ 2*1050 ≤ arr[i] < 212 Input Format For Custom TestingSample Case 0Sample Input For Custom TestingSTDIN Function----- --------4 => n = 41 => arr = [1, 2, 1, 3]213Sample Output4ExplanationAll unordered pair of elements whose bitwise AND is a power of 2 are:For indices (0,2), 1 & 1 = 1, which is a power of 2.For indices (0,3), 1 & 3 = 1, which is a power of 2.For indices (1,3), 2 & 3 = 2, which is a power of 2.For indices (2,3), 1 & 3 = 1, which is a power of 2.Therefore, the answer is 4.Sample Case 1Sample Input For Custom Testing3024Sample Output0ExplanationThere are no pairs of array elements such that their bitwise AND is a power of 2. Therefore, the answer is 0.